" vim: fdm=marker
call plug#begin('~/.vim/plugins')

" Color Schemes
Plug 'nanotech/jellybeans.vim'
Plug 'rakr/vim-two-firewatch'
" Editing
Plug 'ervandew/supertab'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'tomtom/tcomment_vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dietsche/vim-lastplace'
" Sessions/Views
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
" Programming
Plug 'vim-syntastic/syntastic'
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/vim-svngutter'
Plug 'tpope/vim-fugitive'
" Python
Plug 'davidhalter/jedi-vim'
" Perl
Plug 'vim-perl/vim-perl'
" Puppet
Plug 'puppetlabs/puppet-syntax-vim'
" UI
Plug 'itchyny/lightline.vim'
Plug 'edkolev/tmuxline.vim'

call plug#end()
filetype plugin indent on

" syntastic {{{
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
" }}}

" tcomment_vim {{{
    nmap ,c <C-_><C-_>
" }}}

" session {{{
    let g:session_autoload='no'
    let g:session_autosave='yes'
    let g:session_verbose_messages=0
    let g:session_default_to_last=0
" }}}

" jedi {{{
    let g:jedi#use_tabs_not_buffers = 1
    let g:jedi#use_splits_not_buffers = "right"
" }}}

" Lightline Configuration {{{
    let g:lightline = {
        \ 'colorscheme': 'twofirewatch',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
        \ 'component': {
        \   'lineinfo': ' %3l:%-2v'
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ }

    function! MyModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! MyReadonly()
        return &ft !~? 'help' && &readonly ? '' : ''
    endfunction

    function! MyFugitive()
        if exists("*fugitive#head")
            let _ = fugitive#head()
            return strlen(_) ? ' '._ : ''
        endif
        return ''
    endfunction

    function! MyFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! MyFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! MyFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! MyMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
" }}}
