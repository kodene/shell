" Vundle support
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle required
Plugin 'gmarik/Vundle.vim'
" Libraries used by other plugins
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

if executable('ack')
    Plugin 'mileszs/ack.vim'
endif

" Color Schemes
Plugin 'nanotech/jellybeans.vim'
Plugin 'dsolstad/vim-wombat256i'
" Edit support
Plugin 'Lokaltog/vim-easymotion'
Plugin 'tpope/vim-surround'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'tomtom/tcomment_vim'
Plugin 'kien/ctrlp.vim'
" Session/View support
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
" UI Support
Plugin 'itchyny/lightline.vim'
"Plugin 'bling/vim-airline'
Plugin 'edkolev/tmuxline.vim'
" General Programming Support
Plugin 'tpope/vim-fugitive'
" PHP support
Plugin 'StanAngeloff/php.vim'
" Perl support
Plugin 'vim-perl/vim-perl'
Plugin 'c9s/perlomni.vim'

call vundle#end()
filetype plugin indent on

" Plugin settings {{{
    " tomtom/tcomment_vim
    nmap ,c <C-_><C-_>
    " xolox/vim-session
    let g:session_autoload='no'
    let g:session_autosave='yes'
    let g:session_verbose_messages=0
    let g:session_default_to_last=0
" }}}

" Lightline Configuration {{{
    let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
        \ 'component': {
        \   'lineinfo': ' %3l:%-2v'
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ }

    function! MyModified()
        return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! MyReadonly()
        return &ft !~? 'help' && &readonly ? '' : ''
    endfunction

    function! MyFugitive()
        if exists("*fugitive#head")
            let _ = fugitive#head()
            return strlen(_) ? ' '._ : ''
        endif
        return ''
    endfunction

    function! MyFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! MyFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! MyFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! MyMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
" }}}

" vim: fdm=marker
