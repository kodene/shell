use Test::More;
use Test::Fatal;
use DateTime;

{
    package Test::TypeLibrary;

    use Moo;
    use WSB::TypeLibrary -types;

    has 'time'      => ( is => 'rw', isa => Datetime, coerce => 1 );
    has 'url'       => ( is => 'rw', isa => Uri, coerce => 1 );
    has 'path'      => ( is => 'rw', isa => Path, coerce => 1 );
    has 'file'      => ( is => 'rw', isa => File, coerce => 1 );
    has 'dir'       => ( is => 'rw', isa => Dir, coerce => 1 );
    has 'absPath'   => ( is => 'rw', isa => AbsPath, coerce => 1 );
    has 'absFile'   => ( is => 'rw', isa => AbsFile, coerce => 1 );
    has 'absDir'    => ( is => 'rw', isa => AbsDir, coerce => 1 );
    has 'softRepo'  => ( is => 'rw', isa => SoftwareRepository );
}

{
    package Mock::SoftwareRepository;

    use Moo;
    with 'WSB::Software::Repository';
    use WSB::Software;

    sub find {
        my $self = shift; ### noop
    }

    sub findAll {
        my
    }
}

### Create test objects
my $test = Test::TypeLibrary->new();
my $dt   = DateTime->now();

### TEST: Datetime
ok( $test->time( undef ), "coerced Datetime using undef" );
is( $test->time()->mdy(), $dt->mdy(), "time is now" );
ok( $test->time( 1388577600 ), "coerced Datetime using epoch" );
is( $test->time()->mdy(), "01-01-2014", "time is 01-01-2014" );

### TEST: Uri
ok( $test->url( 'http://test.tld/some/path' ), "coerced Uri using string" );

### TEST: Path
ok( $test->path( '.' ), "coerced Path using string" );
is( $test->path()->stringify(), '.', "path is ." );

### TEST: File
ok( $test->file( './README.md' ), "coerced File using string" );
like(
    exception { $test->file( '/some/bogus/file' ) },
    qr/File .* does not exist/,
    "exception when File doesn't exist",
);

### TEST: Dir
ok ( $test->dir( '/tmp' ), "coerced Dir using string" );
like(
    exception { $test->dir( '/some/bogus/dir/' ) },
    qr/Directory .* does not exist/,
    "exception when Dir doesn't exist",
);

### TEST: AbsPath
ok( $test->absPath( '/tmp' ), "coerced AbsPath using string" );
like(
    exception { $test->absPath( 'bogus/non_absolute/dir/' ) },
    qr/Path .* is not absolute/,
    "exception when AbsPath not absolute",
);

### TEST: AbsFile
system('touch', '/tmp/wsb_test_file');
ok( $test->absFile( '/tmp/wsb_test_file' ), "coerced AbsFile using string" );
like(
    exception { $test->absFile( 'bogus/file' ) },
    qr/File .* is not absolute/,
    "exception when AbsFile not absolute",
);
system('rm', '-f', '/tmp/wsb_test_file');

### TEST: AbsDir
ok( $test->absDir( '/tmp' ), "coerced AbsDir using string" );
like(
    exception { $test->absDir( 'bogus/non_absolute/dir' ) },
    qr/Directory .* is not absolute/,
    "exception when AbsDir is not absolute",
);

### TEST: SoftwareRepository
my $repo = Mock::SoftwareRepository->new();
ok( $test->softRepo( $repo ), "added SoftwareRepository");


done_testing();

