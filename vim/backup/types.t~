use Test::More tests => 18;
use Test::Fatal;

{
    package Test::WSB::Types;

    use WSB::Types -types;
    use Moo;
    use Software::Build;

    has 'test_Uri'     => ( is => 'rw', isa => Uri, coerce => 1 );
    has 'test_Path'    => ( is => 'rw', isa => Path, coerce => 1 );
    has 'test_File'    => ( is => 'rw', isa => File, coerce => 1 );
    has 'test_Dir'     => ( is => 'rw', isa => Dir, coerce => 1 );
    has 'test_AbsDir'  => ( is => 'rw', isa => AbsDir, coerce => 1 );
    has 'test_AbsFile' => ( is => 'rw', isa => AbsFile, coerce => 1 );
    has 'test_Build'   => ( is => 'rw', isa => SoftwareBuild, coerce => 1 );
    has 'test_Feature' => ( is => 'rw', isa => SoftwareFeature, coerce => 1 );
}

my $test = Test::WSB::Types->new();

ok( $test->test_Uri('http://test.tld/my/path'), 'Set test_Uri' );

is( $test->test_Uri, 'http://test.tld/my/path', 'Uri returns full string' );

is( $test->test_Uri->path, '/my/path', 'Uri object returns path' );

ok( $test->test_Path('/tmp'), 'Set test_Path' );

system( 'touch', 'testfile' );
ok( $test->test_File('testfile'), 'Set test_File' );
system( 'rm',    'testfile' );

like(
    exception { $test->test_File('bogus') },
    qr/File .* does not exist/,
    "test_File throws exception when file doesn't exist",
);

system( 'mkdir', 'testdir' );
ok( $test->test_Dir('testdir'), 'Set test_Dir' );
system( 'rmdir', 'testdir' );

like(
    exception { $test->test_Dir('/tmp/bogus') },
    qr/Directory .* does not exist/,
    "test_Dir throws exception when directory doesn't exist",
);

like(
    exception { $test->test_AbsDir('bogus') },
    qr/did not pass type constraint/,
    "test_AbsDir throws exception on relative path",
);

system( 'mkdir', '/tmp/testdir' );
ok( $test->test_AbsDir('/tmp/testdir'), 'Set test_AbsDir' );
system( 'rmdir', '/tmp/testdir' );

like(
    exception { $test->test_AbsDir('/tmp/bogus') },
    qr/Directory .* does not exist/,
    "test_AbsDir throws exception when directory doesn't exist",
);

like(
    exception { $test->test_AbsFile('bogus') },
    qr/did not pass type constraint/,
    "test_AbsFile throws exception on relative path",
);

system( 'touch', '/tmp/testfile' );
ok( $test->test_AbsFile('/tmp/testfile'), 'Set test_AbsFile' );
system( 'rm',    '/tmp/testfile' );

like(
    exception { $test->test_AbsFile('/tmp/bogus') },
    qr/File .* does not exist/,
    "test_AbsFile throws exception when file doesn't exist",
);

ok( $test->test_Build( {
        configure => ['configure'],
        make      => ['make'],
        test      => ['make test'],
        install   => ['make install'],
        clean     => ['make clean'],
    } ), 'Set test_Build' );
isa_ok( $test->test_Build, 'Software::Build' );

ok( $test->test_Feature( {
        name         => 'test-1',
        dependencies => ['test-2'],
        configure    => ['with-test-1'],
    } ), 'Set test_Feature' );
isa_ok( $test->test_Feature, 'Software::Feature' );
